/*
 * Copyright (C) 2016 - 2019  (See AUTHORS)
 *
 * This file is part of Owl.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


apply plugin: 'antlr'
apply plugin: 'java'
apply plugin: 'application'

import groovy.io.FileType

project.group = 'de.tum.in'
project.version = 'afl-1'

project.archivesBaseName = 'afl-1'
project.mainClassName = 'de.tum.in.afl.Main'
project.sourceCompatibility = JavaVersion.VERSION_11
project.targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    // http://www.antlr.org/
    // https://mvnrepository.com/artifact/org.antlr

    implementation 'org.antlr:antlr-runtime:3.5.2'
    antlr 'org.antlr:antlr:3.5.2'
}

generateGrammarSource {
    arguments += ["-visitor", "-long-messages", "-lib", "src/main/antlr"]
    // Using outputDirectory here doesn't work - then IDEA does not pick up the folder as source
    // root anymore.
    doLast {
        def move = [/*File wrong position*/:/*File right position*/]
        generateGrammarSource.outputDirectory.eachFileMatch(FileType.FILES, ~/.*\.java/) { f ->
            def pkg = 'package de.tum.in.afl;'
            if (pkg) {
                pkg = pkg.split(' ')[1].replace(';', '')
                pkg = pkg.replace('.', '/')
                //noinspection GroovyAssignabilityCheck
                move.put(f, new File("${generateGrammarSource.outputDirectory}/$pkg/${f.name}"))
            }
        }
        move.each { s, t ->
            t.parentFile.mkdirs()
            s.renameTo(t.absolutePath)
        }
    }
}
